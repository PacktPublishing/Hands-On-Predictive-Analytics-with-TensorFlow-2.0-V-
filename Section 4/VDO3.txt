# Python code to Rescale data (between 0 and 1) 
import numpy as np

from sklearn import preprocessing

#We imported a couple of packages. Let's create some sample data and add the line to this file:

input_data = np.array([[3, -1.5, 3, -6.4], [0, 3, -1.5, 4.1], [1, 2.3, -3.9, -4.3]])

#Preprocessing Techniques

#Mean Removal

data_standardized = preprocessing.scale(input_data)
print ("\nMean = ", data_standardized.mean(axis = 0))
print ("Std deviation = ", data_standardized.std(axis = 0))

#scaling

data_scaler = preprocessing.MinMaxScaler(feature_range = (0, 1))
data_scaled = data_scaler.fit_transform(input_data)
print ("\nMin max scaled data = ", data_scaled)


#Normalization

data_normalized = preprocessing.normalize(input_data, norm  = 'l1')
print ("\nL1 normalized data = ", data_normalized)

#binarization

data_binarized = preprocessing.Binarizer(threshold=1.4).transform(input_data)
print ("\nBinarized data =", data_binarized)


#one hote encoding

encoder = preprocessing.OneHotEncoder()
encoder.fit([  [0, 2, 1, 12], 
               [1, 3, 5, 3], 
               [2, 3, 2, 12], 
               [1, 2, 4, 3]
])
encoded_vector = encoder.transform([[2, 3, 5, 3]]).toarray()
print ("\nEncoded vector =", encoded_vector)


#label Encoder

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
input_classes = ['suzuki', 'ford', 'suzuki', 'toyota', 'ford', 'bmw']
label_encoder.fit(input_classes)
print ("\nClass mapping:")
for i, item in enumerate(label_encoder.classes_):
    print (item, '-->', i)
    
    
labels = ['toyota', 'ford', 'suzuki']
encoded_labels = label_encoder.transform(labels)
print ("\nLabels =", labels)
print ("Encoded labels =", list(encoded_labels))